<?xml version="1.0"?>
<ruleset name="GigaOM">
 <description>GigaOM coding standards.</description>
 <exclude-pattern>*/.git/*</exclude-pattern>
 <exclude-pattern>*/.svn/*</exclude-pattern>

 <!-- CLOSE, but no cigar:
    generic switch
    squiz"
       arrays
       classDeclaration
       closingDeclarationComment
       
    -->

 <!-- Reports errors if the same class or interface name is used in multiple files. -->
 <rule ref="Generic.Classes.DuplicateClassName"/>

 <!--  This sniff implements the common algorithm for empty statement body detection. A body is considered as empty if it is completely empty or it only contains whitespace characters and|or comments. -->
 <rule ref="Generic.CodeAnalysis.EmptyStatement"/>

 <!-- Detects for-loops that use a function call in the test expression. -->
 <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
 
 <!--  Detects incrementer jumbling in for loops. -->
 <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
 
 <!-- Detects unconditional if- and elseif-statements. -->
 <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
 
 <!-- Detects unnecessary final modifiers inside of final classes. -->
 <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

 <!-- Checks the for unused function parameters. -->
 <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
 
 <!-- Warns about FIXME comments. -->
 <rule ref="Generic.Commenting.Fixme"/>
 
 <!-- Warns about TODO comments. -->
 <rule ref="Generic.Commenting.Todo"/>
 
 <!-- Runs jshint.js on the file. -->
 <rule ref="Generic.Debug.JSHint"/>
 
 <!-- Runs gjslint on the file. -->
 <!-- rule ref="Generic.Debug.ClosureLinter"/ -->
 
 <!-- A simple sniff for detecting BOMs that may corrupt application work. -->
 <rule ref="Generic.Files.ByteOrderMark"/>
 
 <!-- Checks that end of line characters are correct. -->
 <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
 <rule ref="Generic.Files.LineEndings">
  <properties>
   <property name="eolChar" value="\n"/>
  </properties>
 </rule>

 <!-- Ensures each statement is on a line by itself. -->
 <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
 
 <!-- Ensures there is a single space after cast tokens. -->
 <rule ref="Generic.Formatting.SpaceAfterCast"/>
 
 <!-- Checks that calls to methods and functions are spaced correctly. -->
 <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
 
 <!-- Checks that the opening brace of a function is on the line after the function declaration. -->
 <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
 
 <!-- Checks the nesting level for methods. -->
 <rule ref="Generic.Metrics.NestingLevel"/>
 
 <!-- Favor PHP 5 constructor syntax, which uses "function __construct()". -->
 <rule ref="Generic.NamingConventions.ConstructorName"/>
 
 <!-- Ensures that constant names are all uppercase. -->
 <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
 
 <!-- Discourages the use of deprecated functions that are kept in PHP for compatibility with older versions.  -->
  <rule ref="Generic.PHP.DeprecatedFunctions"/>
 
 <!-- Makes sure that shorthand PHP open tags are not used. -->
 <rule ref="Generic.PHP.DisallowShortOpenTag"/>
 
 <!-- Discourages the use of alias functions that are kept in PHP for compatibility with older versions. Can be used to forbid the use of any function. -->
 <!-- @TODO: this would be sweet to extend with other discouraged GigaOM functions (perhaps even WP ones -->
 <rule ref="Generic.PHP.ForbiddenFunctions"/>
 
 <!-- Checks that two strings are not concatenated together; suggests using one string instead. -->
 <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
 
 
 <!-- Checks the declaration of the class and its inheritance is correct. -->
 <rule ref="PSR2.Classes.ClassDeclaration"/>
 
 <!-- Verifies that properties are declared correctly. -->
 <rule ref="PSR2.Classes.PropertyDeclaration"/>
 
 <!-- Verifies that there are no else if statements. Elseif should be used instead. -->
 <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
 
 <!-- Checks that the method declaration is correct. -->
 <rule ref="PSR2.Methods.MethodDeclaration"/>
 
 <!-- Checks that no perl-style comments are used. -->
 <rule ref="PEAR.Commenting.InlineComment"/>
 
 <!-- Checks that the include_once is used in conditional situations, and require_once is used elsewhere. Also checks that brackets do not surround  the file being included -->
 <rule ref="PEAR.Files.IncludingFile"/>
 
 <!-- A Sniff to ensure that parameters defined for a function that have a default value come at the end of the function signature. -->
 <rule ref="PEAR.Functions.ValidDefaultValue"/>
 
 <!-- Ensures class and interface names start with a capital letter and use _ separators. -->
 <rule ref="PEAR.NamingConventions.ValidClassName"/>
 
 <!-- Ensures all class keywords are lowercase. -->
 <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
 
 <!-- Tests self member references. -->
 <rule ref="Squiz.Classes.SelfMemberReference"/>
 
 <!-- Ensures all control structure keywords are lowercase. -->
 <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
 
 <!--------------- PAUSED HERE ALPHA_BORTICALLY ----------------------->
 
 <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
 <rule ref="Zend.Files.ClosingTag"/>

 <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
 <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
  <severity>0</severity>
 </rule>
 <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
  <severity>0</severity>
 </rule>
 <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
  <severity>0</severity>
 </rule>

 <!-- Visibility MUST be declared on all methods. -->
 <rule ref="Squiz.Scope.MethodScope"/>
 <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
</ruleset>
